---
version: 1.2.1
title: codegen_properties_nested_test
---
RootSchema(
  [],
  Properties(
    True,
    [],
    PropertiesSchema(
      [
        #(
          "name",
          Type(False, [], String),
        ),
        #(
          "values",
          Properties(
            True,
            [],
            PropertiesSchema(
              [
                #(
                  "amount",
                  Type(False, [], Uint8),
                ),
                #(
                  "key",
                  Type(
                    False,
                    [],
                    String,
                  ),
                ),
              ],
              [],
              False,
            ),
          ),
        ),
      ],
      [],
      False,
    ),
  ),
)

-----------------------------------------------------------

import decode
import gleam/json
import gleam/option

pub type Data {
  Data(
    name: String,
    values: DataValues,
  )
}

pub type Datavalues {
  Datavalues(
    amount: Int,
    key: String,
  )
}

pub fn data_decoder() -> decode.Decoder(option.Option(Data)) {
  decode.nullable(deocode.into({
    use name <- decode.parameter
    use values <- decode.parameter
    Data(name:, values:)
  })
  |> decode.field("name", decode.string)
  |> decode.field("values", decode.nullable(deocode.into({
    use amount <- decode.parameter
    use key <- decode.parameter
    DataValues(amount:, key:)
  })
  |> decode.field("amount", decode.int)
  |> decode.field("key", decode.string))))
}

pub fn data_to_json(data: todo) -> json.Json {
  todo
}