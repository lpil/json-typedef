---
version: 1.2.1
title: codegen_discriminator_as_elements_test
file: ./test/json_typedef_test.gleam
test_name: codegen_discriminator_as_elements_test
---
RootSchema(
  [],
  Elements(
    False,
    [],
    Discriminator(
      False,
      [],
      "kind",
      [
        #(
          "up",
          PropertiesSchema(
            [
              #(
                "height",
                Type(False, [], Uint8),
              ),
            ],
            [],
            False,
          ),
        ),
        #(
          "down",
          PropertiesSchema(
            [
              #(
                "depth",
                Type(False, [], Float32),
              ),
              #(
                "note",
                Type(True, [], String),
              ),
            ],
            [],
            False,
          ),
        ),
      ],
    ),
  ),
)

-----------------------------------------------------------

import decode
import gleam/json
import gleam/option

pub type DataElement {
  DataElementDown(
    depth: Float,
    note: String,
  )
  DataElementUp(
    height: Int,
  )
}

pub fn data_decoder() -> decode.Decoder(List(Data)) {
  decode.list(decode.at(["kind"], decode.string)
  |> decode.then(fn(tag) {
    case tag {
    "up" -> decode.into({
    use height <- decode.parameter
    DataUp(height:)
  })
  |> decode.field("height", decode.int)
    "down" -> decode.into({
    use depth <- decode.parameter
    use note <- decode.parameter
    DataDown(depth:, note:)
  })
  |> decode.field("depth", decode.float)
  |> decode.field("note", decode.nullable(decode.string))
      _ -> decode.fail("Data")
    }
  }))
}

pub fn data_to_json(data: List(Data)) -> json.Json {
  json.array(data, fn(data) { case data {
    DataUp(height:) -> json.object([
    #("kind", json.string("up")),
    #("height", json.int(height)),
  ])
    DataDown(depth:, note:) -> json.object([
    #("kind", json.string("down")),
    #("depth", json.float(depth)),
    #("note", json.nullable(note, json.string)),
  ])
  } })
}